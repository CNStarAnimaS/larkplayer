{"version":3,"sources":["../../js/ui/buffer-bar.js"],"names":["Dom","BufferBar","player","options","line","$","el","handleProgress","bind","on","buffered","duration","currentTime","i","length","start","end","width","render","style","createElement","className","registerComponent"],"mappings":";;;;;;;;AAYA;;;;AACA;;IAAYA,G;;;;;;;;;;+eAbZ;;;;;;;;;;;;IAeqBC,S;;;AACjB,uBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AAAA,0HACnBD,MADmB,EACXC,OADW;;AAGzB,cAAKC,IAAL,GAAYJ,IAAIK,CAAJ,CAAM,wBAAN,EAAgC,MAAKC,EAArC,CAAZ;AACA,cAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,OAAtB;;AAEA,cAAKN,MAAL,CAAYO,EAAZ,CAAe,UAAf,EAA2B,MAAKF,cAAhC;AACA;AACA;AACA,cAAKL,MAAL,CAAYO,EAAZ,CAAe,SAAf,EAA0B,MAAKF,cAA/B;AACA,cAAKA,cAAL;AAVyB;AAW5B;;;;yCAEgB;AACb;AACA,gBAAMG,WAAW,KAAKR,MAAL,CAAYQ,QAAZ,EAAjB;AACA,gBAAMC,WAAW,KAAKT,MAAL,CAAYS,QAAZ,EAAjB;AACA,gBAAMC,cAAc,KAAKV,MAAL,CAAYU,WAAZ,EAApB;;AAEA,gBAAID,WAAW,CAAf,EAAkB;AACd,qBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIH,SAASI,MAA7B,EAAqCD,GAArC,EAA0C;AACtC,wBAAIH,SAASK,KAAT,CAAeF,CAAf,KAAqBD,WAArB,IAAoCF,SAASM,GAAT,CAAaH,CAAb,KAAmBD,WAA3D,EAAwE;AACpE,4BAAMK,QAASP,SAASM,GAAT,CAAaH,CAAb,IAAkBF,QAAnB,GAA+B,GAA/B,GAAqC,GAAnD;AACA,6BAAKO,MAAL,CAAYD,KAAZ;AACA;AACH;AACJ;AACJ;AACJ;;;+BAEMA,K,EAAO;AACV,iBAAKb,IAAL,CAAUe,KAAV,CAAgBF,KAAhB,GAAwBA,KAAxB;AACH;;;gCAEO;AACJ,iBAAKC,MAAL,CAAY,CAAZ;AACH;;;mCAEU;AACP,gBAAMd,OAAOJ,IAAIoB,aAAJ,CAAkB,KAAlB,EAAyB;AAClCC,2BAAW;AADuB,aAAzB,CAAb;;AAIA,mBAAOrB,IAAIoB,aAAJ,CAAkB,KAAlB,EAAyB;AAC5BC,2BAAW;AADiB,aAAzB,EAEJjB,IAFI,CAAP;AAGH;;;;;;kBA/CgBH,S;;;AAkDrB,oBAAUqB,iBAAV,CAA4B,WAA5B,EAAyCrB,SAAzC","file":"buffer-bar.js","sourcesContent":["/**\n * @file 显示视频已加载的量\n * @author yuhui<yuhui06@baidu.com>\n * @date 2017/11/13\n * @see https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/buffering_seeking_time_ranges\n * @desc\n *    1) 在视频没开始播放之前，提前下载的视频资源由 preload 属性的值决定\n *           - none 什么都没有，所以我们连视频总时长都没法获取到\n *           - metadata 可以获取到视频时长、高宽等信息\n *           - auto 视浏览器而定，一般 >= metadata\n */\n\nimport Component from '../component';\nimport * as Dom from '../utils/dom';\n\nexport default class BufferBar extends Component {\n    constructor(player, options) {\n        super(player, options);\n\n        this.line = Dom.$('.lark-buffer-bar__line', this.el);\n        this.handleProgress = this.handleProgress.bind(this);\n\n        this.player.on('progress', this.handleProgress);\n        // 对于已经 video 已经初始化完成后才调用 larkplayer 的情况，此时可能已经没有 progress 事件\n        // 不过我们会在 player.handleLateInit 中重新触发 canplay 等事件（canplay 时，播放器应该已经有一定的 buffer）\n        this.player.on('canplay', this.handleProgress);\n        this.handleProgress();\n    }\n\n    handleProgress() {\n        // TimeRanges 对象\n        const buffered = this.player.buffered();\n        const duration = this.player.duration();\n        const currentTime = this.player.currentTime();\n\n        if (duration > 0) {\n            for (let i = 0; i < buffered.length; i++) {\n                if (buffered.start(i) <= currentTime && buffered.end(i) >= currentTime) {\n                    const width = (buffered.end(i) / duration) * 100 + '%';\n                    this.render(width);\n                    break;\n                }\n            }\n        }\n    }\n\n    render(width) {\n        this.line.style.width = width;\n    }\n\n    reset() {\n        this.render(0);\n    }\n\n    createEl() {\n        const line = Dom.createElement('div', {\n            className: 'lark-buffer-bar__line'\n        });\n\n        return Dom.createElement('div', {\n            className: 'lark-buffer-bar'\n        }, line);\n    }\n}\n\nComponent.registerComponent('BufferBar', BufferBar);"]}