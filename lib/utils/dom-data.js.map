{"version":3,"sources":["../../js/utils/dom-data.js"],"names":["getData","hasData","removeData","elData","elIdAttr","Date","now","el","id","Object","keys","length","e","removeAttribute"],"mappings":";;;;;QAyBgBA,O,GAAAA,O;QAoBAC,O,GAAAA,O;QAeAC,U,GAAAA,U;;AAnDhB;;AAEA;AACA;AACA;AACA,IAAIC,SAAS,EAAb;;AAEA;AAhBA;;;;;;;;;AAiBA,IAAMC,WAAW,qBAAqBC,KAAKC,GAAL,EAAtC;;AAEA;;;;;;AAMO,SAASN,OAAT,CAAiBO,EAAjB,EAAqB;AACxB,QAAIC,KAAKD,GAAGH,QAAH,CAAT;;AAEA,QAAI,CAACI,EAAL,EAAS;AACLA,aAAKD,GAAGH,QAAH,IAAe,oBAApB;AACH;;AAED,QAAI,CAACD,OAAOK,EAAP,CAAL,EAAiB;AACbL,eAAOK,EAAP,IAAa,EAAb;AACH;;AAED,WAAOL,OAAOK,EAAP,CAAP;AACH;;AAED;;;;;;AAMO,SAASP,OAAT,CAAiBM,EAAjB,EAAqB;AACxB,QAAMC,KAAKD,GAAGH,QAAH,CAAX;;AAEA,QAAI,CAACI,EAAD,IAAO,CAACL,OAAOK,EAAP,CAAZ,EAAwB;AACpB,eAAO,KAAP;AACH;;AAED,WAAO,CAAC,CAACC,OAAOC,IAAP,CAAYP,OAAOK,EAAP,CAAZ,EAAwBG,MAAjC;AACH;;AAED;;;;;AAKO,SAAST,UAAT,CAAoBK,EAApB,EAAwB;AAC3B,QAAMC,KAAKD,GAAGH,QAAH,CAAX;;AAEA,QAAI,CAACI,EAAL,EAAS;AACL;AACH;;AAED;AACA,WAAOL,OAAOK,EAAP,CAAP;;AAEA;AACA,QAAI;AACA,eAAOD,GAAGH,QAAH,CAAP;AACH,KAFD,CAEE,OAAOQ,CAAP,EAAU;AACR,YAAIL,GAAGM,eAAP,EAAwB;AACpBN,eAAGM,eAAH,CAAmBT,QAAnB;AACH,SAFD,MAEO;AACH;AACAG,eAAGH,QAAH,IAAe,IAAf;AACH;AACJ;AACJ","file":"dom-data.js","sourcesContent":["/**\n * @file dom-data.js\n * @author yuhui06@baidu.com\n * @date 2017/11/3\n * @desc\n *      1) 这是一个神奇的方法，看好了，最好别眨眼😉\n *      2) 这里没有 setData 方法，只负责取数据就行了。我们往取回来的数据里塞东西，自然就存起来了\n */\n\nimport {newGUID} from './guid';\n\n// 所有的数据会存在这里\n// 我们可以将数据与 DOM 元素绑定，但又不是直接将数据放在它上面\n// eg. Event listeners 是通过这种方式绑定的\nlet elData = {};\n\n// 每次当然要存在不一样的地方\nconst elIdAttr = 'larkplayer_data_' + Date.now();\n\n/**\n * 获取 DOM 元素上的数据\n *\n * @param {Element} el 获取该元素上的数据\n * @return {Object} 想要的数据\n */\nexport function getData(el) {\n    let id = el[elIdAttr];\n\n    if (!id) {\n        id = el[elIdAttr] = newGUID();\n    }\n\n    if (!elData[id]) {\n        elData[id] = {};\n    }\n\n    return elData[id];\n}\n\n/**\n * 判断一个元素上是否有我们存的数据\n *\n * @param {Element} el 就是要看这个元素上有没有我们之前存的数据\n * @return {boolean} 元素上是否存有数据\n */\nexport function hasData(el) {\n    const id = el[elIdAttr];\n\n    if (!id || !elData[id]) {\n        return false;\n    }\n\n    return !!Object.keys(elData[id]).length;\n}\n\n/**\n * 删除我们之前在元素上存放的数据\n *\n * @param {Element} el 宿主元素\n */\nexport function removeData(el) {\n    const id = el[elIdAttr];\n\n    if (!id) {\n        return;\n    }\n\n    // 删除存放的数据\n    delete elData[id];\n\n    // 同时删除 DOM 上的对应属性\n    try {\n        delete el[elIdAttr];\n    } catch (e) {\n        if (el.removeAttribute) {\n            el.removeAttribute(elIdAttr);\n        } else {\n            // IE document 节点似乎不支持 removeAttribute 方法\n            el[elIdAttr] = null;\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}