{"version":3,"sources":["../../js/utils/dom.js"],"names":["isReal","isEl","createQuerier","createEl","createElement","textContent","normalizeContent","isTextNode","prependTo","parent","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","getAttribute","setAttribute","removeAttribute","blockTextSelection","unblockTextSelection","getBoundingClientRect","findPostion","getPointerPosition","emptyEl","appendContent","insertContent","replaceContent","document","window","isNonBlankString","str","test","throwIfWhitespace","Error","classRegExp","className","RegExp","value","nodeType","method","selector","context","querySelector","ctx","tagName","properties","attributes","content","el","Object","keys","forEach","val","propName","indexOf","attrName","props","child","text","innerText","Array","isArray","concat","map","createTextNode","filter","firstChild","insertBefore","appendChild","classForSelector","result","parentNode","classToCheck","classList","contains","classToAdd","add","trim","classToRemove","remove","split","join","classToToggle","predicate","has","attrValue","collection","knownBooleans","length","attrs","i","includes","attribute","attr","body","focus","onselectstart","rect","undefined","height","parseFloat","width","box","left","top","docEl","documentElement","clientLeft","scrollLeft","pageXOffset","clientTop","scrollTop","pageYOffset","Math","round","event","position","boxW","offsetWidth","boxH","offsetHeight","boxY","boxX","pageX","pageY","changedTouches","x","max","min","y","removeChild","node","$","$$"],"mappings":"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","file":"dom.js","sourcesContent":["/**\n * @file dom 相关 api\n * @author yuhui06@baidu.com\n * @date 2017/11/2\n */\n\nimport {isObject} from './obj';\nimport computedStyle from './computed-style';\n\nconst document = window.document;\n\n\n/**\n * 检测一个字符串是否包含任何非空格的字符\n *\n * @inner\n *\n * @param {string} str 待检查的字符串\n * @return {boolean} 是否包含非空格的字符\n */\nfunction isNonBlankString(str) {\n    return typeof str === 'string' && (/\\S/).test(str);\n}\n\n/**\n * 如果字符串中包含空格，则抛出错误\n *\n * @inner\n *\n * @param {string} str 待检查的字符串\n * @throws {Error}\n */\nfunction throwIfWhitespace(str) {\n    if ((/\\s/).test(str)) {\n        throw new Error('class has illegal whitespace characters');\n    }\n}\n\n/**\n * 生成一个正则表达式，用于检查一个元素的 className 字符串中是否包含特定的 className\n *\n * @inner\n *\n * @param {string} className 就是为了他！\n * @return {Regexp} 用于检查该类名是否存在于一个元素的 className 字符串中\n */\nfunction classRegExp(className) {\n    return new RegExp('(^|\\\\s)' + className + '($|\\\\$)');\n}\n\n/**\n * 是否处于浏览器环境中\n *\n * @return {boolean}\n */\nexport function isReal() {\n    // IE 9 以下，DOM 上的方法的 typeof 类型为 'object' 而不是 'function'\n    // 所以这里用 'undefined' 检测\n    return typeof document.createElement !== 'undefined';\n}\n\n/**\n * 判断一个变量是否是 DOM element\n *\n * @param {Mixed} value 待检查的变量\n * @return {boolean} 是否是 DOM element\n */\nexport function isEl(value) {\n    return isObject(value) && value.nodeType === 1;\n}\n\n\n/**\n * 创建一个 DOM 查询函数，这个函数在原有方法的基础上有额外的指定上下文的功能\n *\n * @param {string} method 方法名\n * @return {Function} 查询 DOM 用的函数\n */\nexport function createQuerier(method) {\n    return function (selector, context) {\n        if (!isNonBlankString(selector)) {\n            return document[method](null);\n        }\n        if (isNonBlankString(context)) {\n            context = document.querySelector(context);\n        }\n\n        const ctx = isEl(context) ? context : document;\n\n        return ctx[method] && ctx[method](selector);\n    };\n}\n\n/**\n * 创建 DOM 元素\n *\n * @param {string=} tagName 元素类型。可选，默认 div\n * @param {Object=} properties 元素 prop 属性。可选，默认无\n * @param {Object=} attributes 元素 attr 属性。可选，默认无\n * @param {string|Element|TextNode|Array|Function=} content 元素内容。可选，默认无\n * @return {Element} el 创建的元素\n */\nexport function createEl(tagName = 'div', properties = {}, attributes = {}, content) {\n    const el = document.createElement(tagName);\n\n    if (properties == null) {\n        properties = {};\n    }\n\n    if (attributes == null) {\n        attributes = {};\n    }\n\n    Object.keys(properties).forEach(propName => {\n        const val = properties[propName];\n\n        // 对于一些属性需要特殊处理\n        if (propName.indexOf('aria-') !== -1\n            || propName === 'role'\n            || propName === 'type') {\n\n            el.setAttribute(propName, val);\n        } else if (propName === 'textContent') {\n            // textContent 并不是所有浏览器都支持，单独写了个方法\n            textContent(el, val);\n        } else {\n            el[propName] = val;\n        }\n    });\n\n    Object.keys(attributes).forEach(attrName => {\n        el.setAttribute(attrName, attributes[attrName]);\n    });\n\n    if (content) {\n        appendContent(el, content);\n    }\n\n    return el;\n}\n\n/**\n * 创建一个元素，并能添加 props 和 子元素\n *\n * vjs 的 createEl 将 props 和 attrs 分成了两个参数，但是我们的业务没必要这么做\n * 而且每次想要传 child 参数的时候，还得先传 attrs 参数让我觉得很烦\n * @todo 先写一个这个函数自己用，后面看有没有必要把 createEl 函数换掉\n *\n * @param {string} tagName DOM 元素标签名\n * @param {Object=} props 要到 DOM 元素上的属性。注意，这里直接是 el.propName = value 的形式，如果涉及到 attrs，建议后续用 setAttrbute 自己添加\n * @param {...Element|string} child 元素的子元素，参数个数不限。可以没有，也可以有多个\n * @return {Element} el 创建的元素\n */\nexport function createElement(tagName = 'div', props = {}, ...child) {\n    const el = document.createElement(tagName);\n\n    if (props == null) {\n        props = {};\n    }\n    Object.keys(props).forEach(propName => {\n        el[propName] = props[propName];\n    });\n\n    if (child) {\n        appendContent(el, child);\n    }\n\n    return el;\n}\n\n/**\n * 更改 DOM 元素中的文本节点（整个文本内容都会被替换掉）\n *\n * @param {Element} el 将要改变文本节点的 DOM 元素\n * @param {string} text 要添加的文本\n * @return {Element} el 更改后的 DOM 元素\n */\nexport function textContent(el, text) {\n    if (typeof el.textContent === 'undefined') {\n        el.innerText = text;\n    } else {\n        el.textContent = text;\n    }\n\n    return el;\n}\n\n/**\n * 将要插入到 DOM 元素中的内容标准化\n *\n * 使用 createTextNode 而不是 createElement 避免 XSS 漏洞\n *\n * @param {string|Element|TextNode|Array|Function} content\n *        - string: 标准化为 text node\n *        - Element/TextNode: 不做任何处理\n *        - Array: 遍历处理数组元素\n *        - Function: 先运行得到结果再处理\n * @return {Array} 标准化后的内容\n */\nexport function normalizeContent(content) {\n    if (typeof content === 'function') {\n        content = content();\n    }\n\n    return (Array.isArray(content) ? content : [].concat(content)).map(value => {\n        if (typeof value === 'function') {\n            value = value();\n        }\n\n        if (isEl(value) || isTextNode(value)) {\n            return value;\n        }\n\n        if (isNonBlankString(value)) {\n            return document.createTextNode(value);\n        }\n    }).filter(value => value);\n}\n\n/**\n * 判断一个变量是否是 textNode\n *\n * @param {Mixed} value 待检查的变量\n * @return {boolean} 是否是 textNode\n */\nexport function isTextNode(value) {\n    return isObject(value) && value.nodeType === 3;\n}\n\n/**\n * 将一个元素插入到另一个中作为第一个子元素\n *\n * @param {Element} child 最终的子元素\n * @param {Element} parent 最终的父元素\n */\nexport function prependTo(child, parent) {\n    if (parent.firstChild) {\n        parent.insertBefore(child, parent.firstChild);\n    } else {\n        parent.appendChild(child);\n    }\n}\n\n/**\n * 返回指定元素的最近的命中选择器的父元素\n *\n * @param {Element} el 要寻找父元素的指定元素\n * @param {string} classForSelector 目前只支持 class 选择器\n * @return {Element|null} 选择器命中的最近的父元素列表\n */\nexport function parent(el, classForSelector) {\n    let result = null;\n    while (el && el.parentNode) {\n        if (hasClass(el.parentNode, classForSelector)) {\n            result = el.parentNode;\n            el = null;\n        } else {\n            el = el.parentNode;\n        }\n    }\n\n    return result;\n}\n\n/**\n * 检查指定元素是否包含指定 class\n *\n * @param {Element} el 宿主元素\n * @param {string} classToCheck 待检查的 class\n * @return {boolean} 元素上是否包含指定 class\n */\nexport function hasClass(el, classToCheck) {\n    throwIfWhitespace(classToCheck);\n\n    if (el.classList) {\n        // node.contains(otherNode)\n        return el.classList.contains(classToCheck);\n    } else {\n        return classRegExp(classToCheck).test(el.className);\n    }\n}\n\n/**\n * 给指定元素增加 class\n *\n * @param {Element} el 要添加 class 的元素\n * @param {string} classToAdd 要添加的 class\n * @return {Element} 添加完 class 后的元素\n */\nexport function addClass(el, classToAdd) {\n    if (el.classList) {\n        el.classList.add(classToAdd);\n    } else if (!hasClass(el, classToAdd)) {\n        el.className = (el.className + ' ' + classToAdd).trim();\n    }\n\n    return el;\n}\n\n/**\n * 移除指定元素的指定 class\n *\n * @param {Element} el 要移除 class 的元素\n * @param {string} classToRemove 要移除的 class\n * @return {Element} 移除指定 class 后的元素\n */\nexport function removeClass(el, classToRemove) {\n    if (hasClass(el, classToRemove)) {\n        if (el.classList) {\n            el.classList.remove(classToRemove);\n        } else {\n            el.className = el.className.split(/\\s+/).filter(className => className !== classToRemove).join(' ');\n        }\n    }\n\n    return el;\n}\n\n/**\n * 增加或删除一个元素上的指定的 class\n *\n * @param {Element} el 将要改变 class 的元素\n * @param {string} classToToggle 要添加或删除的 class\n * @param {Function|boolean=} predicate 添加或删除 class 的依据（额外的判断条件）\n * @return {Element} 改变完 class 后的元素\n */\nexport function toggleClass(el, classToToggle, predicate) {\n    // IE 下不支持 el.classList.toggle 方法的第二个参数\n    // 不过不影响，因为这里我们用 add/remove\n    const has = hasClass(el, classToToggle);\n\n    if (typeof predicate === 'function') {\n        predicate = predicate(el, classToToggle);\n    }\n\n    if (typeof predicate !== 'boolean') {\n        predicate = !has;\n    }\n\n    if (predicate === has) {\n        return;\n    }\n\n    if (predicate) {\n        addClass(el, classToToggle);\n    } else {\n        removeClass(el, classToToggle);\n    }\n\n    return el;\n}\n\n/**\n * 设置元素的属性\n *\n * @param {Element} el 要设置属性的元素\n * @param {Object} attributes 要设置的属性集合\n */\nexport function setAttributes(el, attributes) {\n    Object.keys(attributes).forEach(attrName => {\n        const attrValue = attributes[attrName];\n\n        if (attrValue == null || attrValue === false) {\n            el.removeAttribute(attrName);\n        } else {\n            el.setAttribute(attrName, (attrValue === true ? '' : attrValue));\n        }\n    });\n}\n\n/**\n * 获取元素的所有属性，将 DOM 的 NamedNodeMap 表示为 key/value 的形式\n *\n * @param {Element} el 要获取属性的元素\n * @return {Object} 以 key/value 形式存储的属性\n * @desc\n *      1) boolean 的属性，其值为 true/false\n */\nexport function getAttributes(el) {\n    let collection = {};\n\n    // 已知的值为 boolean 的属性\n    // 有些浏览器的这些属性的 typeof 是 boolean，有些不是\n    // 列出一个白名单以确保我们想要的效果\n    const knownBooleans = [\n        'autoplay',\n        'controls',\n        'playsinline',\n        'webkit-playsinline',\n        'loop',\n        'muted',\n        'default',\n        'defaultMuted'\n    ];\n\n    if (el && el.attributes && el.attributes.length) {\n        const attrs = el.attributes;\n\n        for (let i = 0; i < attrs.length; i++) {\n            let attrName = attrs[i]['name'];\n            let attrValue = attrs[i]['value'];\n\n            if (typeof el[attrName] === 'boolean' || knownBooleans.includes(attrName)) {\n                attrValue = (attrValue !== null) ? true : false;\n            }\n\n            collection[attrName] = attrValue;\n        }\n    }\n\n    return collection;\n}\n\n/**\n * 获取元素的指定属性，element.getAttribute 换一种写法\n *\n * @param {Element} el 要获取属性的元素\n * @param {string} attribute 要获取的属性名\n * @return {string} 获取的属性值\n */\nexport function getAttribute(el, attribute) {\n    return el.getAttribute(attribute);\n}\n\n/**\n * 设置元素的指定属性 element.setAttribute 换一种写法\n *\n * @param {Element} el 要设置属性的元素\n * @param {string} attr 要设置的属性\n * @param {Mixed} value 要设置的属性的值\n */\nexport function setAttribute(el, attr, value) {\n    // 应该没有属性的值为 \"true\" 的形式，对于这种，直接转换为空的字符串\n    // 如 controls = \"true\" => controls\n    el.setAttribute(attr, (value === true ? '' : value));\n}\n\n/**\n * 移除元素上的指定属性 element.removeAttribute 换一种写法\n *\n * @param {Element} el 要移除属性的元素\n * @param {string} attribute 要移除的属性名\n */\nexport function removeAttribute(el, attribute) {\n    el.removeAttribute(attribute);\n}\n\n/**\n * 当拖动东西的时候，尝试去阻塞选中文本的功能\n */\nexport function blockTextSelection() {\n    document.body.focus();\n    document.onselectstart = function () {\n        return false;\n    };\n}\n\n/**\n * 关闭对文本选中功能的阻塞\n */\nexport function unblockTextSelection() {\n    document.onselectstart = function () {\n        return true;\n    };\n}\n\n/**\n * 同原生的 getBoundingClientRect 方法一样，确保兼容性\n *\n * 在一些老的浏览器（比如 IE8）提供的属性不够时，此方法会手动补全\n *\n * 另外，一些浏览器不支持向 ClientRect/DOMRect 对象中添加属性，所以我们选择创建一个新的对象，\n * 并且把 ClientReact 中的标准属性浅拷贝过来（ x 和 y 没有拷贝，因为这个属性支持的并不广泛）\n *\n * @param {Element} el 要获取 ClientRect 对象的元素\n * @return {Object|undefined}\n */\nexport function getBoundingClientRect(el) {\n    // TODO 为什么还需要判断 parentNode\n    if (el && el.getBoundingClientRect && el.parentNode) {\n        const rect = el.getBoundingClientRect();\n        const result = {};\n\n        ['top', 'right', 'bottom', 'left', 'width', 'height'].forEach(attr => {\n            if (rect[attr] !== undefined) {\n                result[attr] = rect[attr];\n            }\n        });\n\n        if (!result.height) {\n            result.height = parseFloat(computedStyle(el, 'height'));\n        }\n\n        if (!result.width) {\n            result.width = parseFloat(computedStyle(el, 'width'));\n        }\n\n        return result;\n    }\n}\n\n/**\n * 获取一个元素在文档中的绝对位置（left, top）\n *\n * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/\n *\n * @param {Element} el 要获取位置的元素\n * @return {Object} 包含位置信息的对象\n *\n * @desc\n *      1) clientLeft/clientTop 获取一个元素的左/上边框的宽度，不包括 padding 和 margin 的值\n */\nexport function findPostion(el) {\n    let box = getBoundingClientRect(el);\n\n    if (!box) {\n        return {left: 0, top: 0};\n    }\n\n    const docEl = document.documentElement;\n    const body = document.body;\n\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n    const scrollLeft = window.pageXOffset || body.scrollLeft;\n    const left = box.left + scrollLeft - clientLeft;\n\n    const clientTop = docEl.clientLeft || body.clientLeft || 0;\n    const scrollTop = window.pageYOffset || body.scrollTop;\n    const top = box.top + scrollTop - clientTop;\n\n    // 安卓有时侯返回小数，稍微有点偏差，这里四舍五入下\n    return {\n        left: Math.round(left),\n        top: Math.round(top)\n    };\n}\n\n/**\n * x and y coordinates for a dom element or mouse pointer\n * 以左下角为原点\n *\n * @typedef {Object} DOM~Coordinates\n *\n * @property {number} x  该点距元素左边的距离／元素宽\n * @property {number} y  该点距元素底部的距离／元素高\n */\n/**\n * 获取一个元素上被点击的位置（相对于该元素左下角）\n *\n * @param {Element} el 被点击的元素\n * @param {Event} event 点击事件\n * @return {DOM~Coordinates}\n * @desc\n *      1) offsetWidth/offsetHeight: 元素宽／高，包括 border padding width/height scrollbar\n *      2) pageX/pageY: 点击的 x/y 坐标，相对于 document，是个绝对值（当有滚动条时会把滚动条的距离也计算在内）\n *      3) changedTouches: touch 事件中的相关数据\n */\nexport function getPointerPosition(el, event) {\n    const position = {};\n    const box = findPostion(el);\n    const boxW = el.offsetWidth;\n    const boxH = el.offsetHeight;\n    const boxY = box.top;\n    const boxX = box.left;\n\n    let pageX = event.pageX;\n    let pageY = event.pageY;\n\n    if (event.changedTouches) {\n        pageX = event.changedTouches[0].pageX;\n        pageY = event.changedTouches[0].pageY;\n    }\n\n    position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));\n    position.y = Math.max(0, Math.min(1, ((boxY - pageY) + boxH) / boxH));\n\n    return position;\n}\n\n/**\n * 清空一个元素\n *\n * @param {Element} el 要清空的元素\n * @return {Element} 移除所有子元素后的元素\n */\nexport function emptyEl(el) {\n    while (el.firstChild) {\n        el.removeChild(el.firstChild);\n    }\n\n    return el;\n}\n\n/**\n * 向元素内插入内容\n *\n * @param {Element} el 父元素\n * @param {string|Element|TextNode|Array|Function} content 待插入的内容，会先经过 normalizeContent 处理\n * @return {Element} 被塞了新内容的元素\n */\nexport function appendContent(el, content) {\n    normalizeContent(content).forEach(node => el.appendChild(node));\n    return el;\n}\n\n/**\n * 替换元素的内容\n * 感觉名字起得不怎么好\n *\n * @param {Element} el 父元素\n * @param {string|Element|TextNode|Array|Function} content\n *        参见 normalizeContent 中参数描述 {@link: dom:normalizeContent}\n * @return {Element} el 替换内容后的元素\n */\nexport function insertContent(el, content) {\n    return appendContent(emptyEl(el), content);\n}\n\n/**\n * 同 insertContent\n * insertContent 是 vjs 里的函数，但我感觉名字起的不好，我想用这个\n *\n * @todo 看可不可以直接把 insertContent 函数去掉（需考虑到后续对 vjs 插件的影响）;\n *\n * @param {Element} el 父元素\n * @param {string|Element|TextNode|Array|Function} content\n *        参见 normalizeContent 中参数描述 {@link: dom:normalizeContent}\n * @return {Element} el 替换内容后的元素\n */\nexport function replaceContent(el, content) {\n    return appendContent(emptyEl(el), content);\n}\n\n/**\n * 通过选择器和上下文（可选）找到一个指定元素\n *\n * @const\n *\n * @type {Function}\n * @param {string} selector css 选择器，反正最后都会被 querySelector 处理，你看着传吧\n * @param {Element|string=} 上下文环境。可选，默认为 document\n * @return {Element|null} 被选中的元素或 null\n */\nexport const $ = createQuerier('querySelector');\n\n\n/**\n * 通过选择器和上下文（可选）找到所有符合的元素\n *\n * @const\n *\n * @type {Function}\n * @param {string} selector css 选择器，反正最后都会被 querySelectorAll 处理，你看着传吧\n * @param {Element|string=} 上下文环境。可选，默认为 document\n * @return {NodeList} 被选中的元素列表，如果没有符合条件的元素，空列表\n */\nexport const $$ = createQuerier('querySelectorAll');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}