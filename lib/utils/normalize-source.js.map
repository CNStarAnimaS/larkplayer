{"version":3,"sources":["../../js/utils/normalize-source.js"],"names":["nomalizeSource","MIME_TYPE_REG","getMIMEType","src","MIMEType","matchResult","match","Array","isArray","nomalizeSingleSource","singleSource","TypeError","hasOwnProperty","type","source","map","value"],"mappings":";;;;;kBAwEwBA,c;;AAlExB;;AACA;;;;;;AAEA;;;;AATA;;;;;;AAaA,IAAMC,gBAAgB,YAAtB;;AAEA;;;;;;AAMA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACtB,QAAIC,WAAW,EAAf;AACA,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AACzB,YAAME,cAAcF,IAAIG,KAAJ,CAAUL,aAAV,CAApB;AACA,YAAIM,MAAMC,OAAN,CAAcH,WAAd,CAAJ,EAAgC;AAC5BD,uBAAWC,YAAY,CAAZ,CAAX;AACH;AACJ;;AAED,WAAO,sBAAYD,QAAZ,CAAP;AACH;;AAGD;;;;;;;;AAQA,SAASK,oBAAT,CAA8BC,YAA9B,EAA4C;AACxC,QAAI,CAAC,kBAAQA,YAAR,CAAL,EAA4B;AACxB,cAAM,IAAIC,SAAJ,CAAc,kCAAd,CAAN;AACA;AACH;;AAED,QAAI,OAAOD,aAAaP,GAApB,KAA4B,QAAhC,EAA0C;AACtC,cAAM,IAAIQ,SAAJ,CAAc,qCAAd,CAAN;AACA;AACH;;AAED,QAAID,aAAaE,cAAb,CAA4B,MAA5B,KAAuC,OAAOF,aAAaG,IAApB,KAA6B,QAAxE,EAAkF;AAC9E,cAAM,IAAIF,SAAJ,CAAc,sCAAd,CAAN;AACA;AACH;;AAGD,QAAI,CAACD,aAAaG,IAAlB,EAAwB;AACpBH,qBAAaG,IAAb,GAAoBX,YAAYQ,aAAaP,GAAzB,CAApB;AACH;;AAED,WAAOO,YAAP;AACH;;AAED;;;;;;AAMe,SAASV,cAAT,CAAwBc,MAAxB,EAAgC;AAC3C,QAAI,kBAAQA,MAAR,CAAJ,EAAqB;AACjB,eAAO,CAACL,qBAAqBK,MAArB,CAAD,CAAP;AACH,KAFD,MAEO,IAAIP,MAAMC,OAAN,CAAcM,MAAd,CAAJ,EAA2B;AAC9B,eAAOA,OAAOC,GAAP,CAAW;AAAA,mBAASN,qBAAqBO,KAArB,CAAT;AAAA,SAAX,CAAP;AACH,KAFM,MAEA;AACH,cAAM,IAAIL,SAAJ,CAAc,8DAAd,CAAN;AACH;AACJ","file":"normalize-source.js","sourcesContent":["/**\n * @file 标准化用户传入的 source 参数\n * @author YuHui<yuhui06@baidu.com>\n * @version 1.0 | YuHui<yuhui06@baidu.com> | 2017/12/14 | initial\n */\n\nimport {isPlain} from './obj';\nimport MIMETypeMap from './mime-type-map';\n\n/**\n * @const\n * 匹配 url 最后一个 . 后面的字符串\n */\nconst MIME_TYPE_REG = /\\.([\\w]+)$/;\n\n/**\n * 根据 src 字符串获取视频类型\n *\n * @param {string} src 链接地址\n * @return {string|undefined} MIMEType 文件类型\n */\nfunction getMIMEType(src) {\n    let MIMEType = '';\n    if (typeof src === 'string') {\n        const matchResult = src.match(MIME_TYPE_REG);\n        if (Array.isArray(matchResult)) {\n            MIMEType = matchResult[1];\n        }\n    }\n\n    return MIMETypeMap[MIMEType];\n}\n\n\n/**\n * 标准化单个 source 对象\n *\n * @param {Object} singleSource 传入的 source 对象\n * @param {string} singleSource.src 视频链接\n * @param {string=} singleSource.type 可选，视频类型，若不填则自动根据视频链接的后缀生成\n * @return {Object} singleSource 标准化后的 source 对象\n */\nfunction nomalizeSingleSource(singleSource) {\n    if (!isPlain(singleSource)) {\n        throw new TypeError('SingleSource should be an Object');\n        return;\n    }\n\n    if (typeof singleSource.src !== 'string') {\n        throw new TypeError('SingleSource.src should be a string');\n        return;\n    }\n\n    if (singleSource.hasOwnProperty('type') && typeof singleSource.type !== 'string') {\n        throw new TypeError('SingleSource.type should be a string');\n        return;\n    }\n\n\n    if (!singleSource.type) {\n        singleSource.type = getMIMEType(singleSource.src);\n    }\n\n    return singleSource;\n}\n\n/**\n * 标准化 source\n *\n * @param {Object|Array} source 要添加到 video 标签里的 source，可以是单个的对象，也可以是包含多个对象的数组\n * @return {Array} 标准化后的 source\n */\nexport default function nomalizeSource(source) {\n    if (isPlain(source)) {\n        return [nomalizeSingleSource(source)];\n    } else if (Array.isArray(source)) {\n        return source.map(value => nomalizeSingleSource(value));\n    } else {\n        throw new TypeError('Source should be an Object or an Array which contains Object');\n    }\n}"]}