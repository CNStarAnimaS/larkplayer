{"version":3,"sources":["../../js/utils/plugin.js"],"names":["isPluginExist","getPlugin","registerPlugin","deregisterPlugin","pluginStore","name","hasOwnProperty","plugin","TypeError","Error"],"mappings":";;;;;QAoBgBA,a,GAAAA,a;QAUAC,S,GAAAA,S;QAaAC,c,GAAAA,c;QAiBAC,gB,GAAAA,gB;AA5DhB;;;;;;AAMA;;;;;;AAMA,IAAMC,cAAc,EAApB;;AAEA;;;;;;AAMO,SAASJ,aAAT,CAAuBK,IAAvB,EAA6B;AAChC,SAAOD,YAAYE,cAAZ,CAA2BD,IAA3B,CAAP;AACH;;AAED;;;;;;AAMO,SAASJ,SAAT,CAAmBI,IAAnB,EAAyB;AAC5B,SAAOD,YAAYC,IAAZ,CAAP;AACH;;AAED;;;;;;;;;AASO,SAASH,cAAT,CAAwBG,IAAxB,EAA8BE,MAA9B,EAAsC;AACzC,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,UAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACH;;AAED,MAAIR,cAAcK,IAAd,CAAJ,EAAyB;AACrB,UAAM,IAAII,KAAJ,CAAU,mCAAV,CAAN;AACH;;AAEDL,cAAYC,IAAZ,IAAoBE,MAApB;AACH;;AAED;;;;;AAKO,SAASJ,gBAAT,CAA0BE,IAA1B,EAAgC;AACnC,SAAOD,YAAYC,IAAZ,CAAP;AACH","file":"plugin.js","sourcesContent":["/**\n * @file plugin.js 一些不想直接写在播放器中的代码，但又可能用到的功能，我们称之为 plugin\n * @author yuhui<yuhui06@baidu.com>\n * @date 2017/11/20\n */\n\n/**\n * @const\n * @inner\n *\n * 以 name => plugin 的形式存储 plugin 的对象\n */\nconst pluginStore = {};\n\n/**\n * 判断 plugin 的名称是否已存在\n *\n * @param {string} name plugin 名称\n * @return {boolean} 指定名称是否已存在\n */\nexport function isPluginExist(name) {\n    return pluginStore.hasOwnProperty(name);\n}\n\n/**\n * 通过名称获取对应过的 plugin\n *\n * @param {string} name 要获取的 plugin 的名称\n * @return {Function} 要获取的 plugin\n */\nexport function getPlugin(name) {\n    return pluginStore[name];\n}\n\n/**\n * 注册 plugin\n * 此方法会被赋值到 larkplayer 上（larkplayer.registerPlugin = registerPlugin）\n * 后续调用时，我们一般从 larkplayer 上调用\n *\n * @param {string} name 要注册的 plugin 的名称\n * @param {Function} plugin 要注册的 plugin 函数。\n *                   plugin 的 this 在运行时会被指定为 player\n */\nexport function registerPlugin(name, plugin) {\n    if (typeof plugin !== 'function') {\n        throw new TypeError('Plugin should be a function');\n    }\n\n    if (isPluginExist(name)) {\n        throw new Error('Plugin has existed, register fail');\n    }\n\n    pluginStore[name] = plugin;\n}\n\n/**\n * 注销 plugin\n *\n * @param {name} name 要注销的 plugin 名称\n */\nexport function deregisterPlugin(name) {\n    delete pluginStore[name];\n}"]}